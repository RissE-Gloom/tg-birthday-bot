const { Telegraf } = require('telegraf');
const { Low } = require('lowdb');
const { JSONFile } = require('lowdb/node');
const { scheduleJob } = require('node-schedule');
const { DateTime } = require('luxon');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const adapter = new JSONFile('db.json');
const db = new Low(adapter, { users: [] });

const bot = new Telegraf('476971889:AAHqIoP0f3hTF7K79JD4_VON8to_awhu9_g');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã (–ú–æ—Å–∫–≤–∞)
const TIMEZONE = 'Europe/Moscow';

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è
async function checkBirthdays() {
  const now = DateTime.now().setZone(TIMEZONE);
  const today = now.toFormat('dd.MM');

  await db.read();
  
  db.data.users.forEach(user => {
    if (user.birthDate === today) {
      bot.telegram.sendMessage(
        user.id,
        `üéâ ${user.name}, —Å–µ–≥–æ–¥–Ω—è —Ç–≤–æ–π –¥–µ–Ω—å! üéÇ\n–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${user.birthDate}`
      );
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start((ctx) => {
  ctx.reply('–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12)');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  try {
    const userId = ctx.from.id;
    const userName = ctx.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    const birthDate = ctx.message.text.trim();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    if (!/^\d{2}\.\d{2}$/.test(birthDate)) {
      return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π –î–î.–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 31.12)');
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    await db.read();
    
    const userIndex = db.data.users.findIndex(u => u.id === userId);
    if (userIndex >= 0) {
      db.data.users[userIndex].birthDate = birthDate;
    } else {
      db.data.users.push({ id: userId, name: userName, birthDate });
    }

    await db.write();
    ctx.reply(`‚úÖ –î–∞—Ç–∞ ${birthDate} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –£–≤–µ–¥–æ–º–ª—é, –∫–æ–≥–¥–∞ –Ω–∞—Å—Ç—É–ø–∏—Ç —ç—Ç–æ—Ç –¥–µ–Ω—å!`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.');
  }
});

// –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 –ø–æ –ú–æ—Å–∫–≤–µ)
scheduleJob('0 9 * * *', () => {
  console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è...');
  checkBirthdays();
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
  .then(() => {
    console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    checkBirthdays(); 
  })
  .catch(err => console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err));