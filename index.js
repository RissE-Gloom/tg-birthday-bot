require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { createClient } = require('@supabase/supabase-js');
const { DateTime } = require('luxon');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  botToken: process.env.TELEGRAM_BOT_TOKEN,
  supabaseUrl: process.env.SUPABASE_URL,
  supabaseKey: process.env.SUPABASE_KEY,
  timezone: process.env.TIMEZONE || 'Europe/Moscow',
  botUsername: 'lkworm_bot' // –ñ–µ—Å—Ç–∫–æ –∑–∞–¥–∞–µ–º –∏–º—è –±–æ—Ç–∞
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const supabase = createClient(config.supabaseUrl, config.supabaseKey);
const bot = new Telegraf(config.botToken);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
async function checkTableStructure() {
  const { error } = await supabase
    .from('chat_members')
    .select('user_id, chat_id, username, birth_date')
    .limit(1);

  if (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã:', error);
    console.log('‚ÑπÔ∏è –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É:');
    console.log(`
      CREATE TABLE chat_members (
        user_id BIGINT,
        chat_id BIGINT,
        username TEXT,
        birth_date TEXT,
        PRIMARY KEY (user_id, chat_id)
      );
    `);
    process.exit(1);
  }
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
const dateUtils = {
  normalizeDate: (input) => {
  const cleaned = input.replace(/\D/g, '');
  if (cleaned.length === 3) {
    // –ï—Å–ª–∏ –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ "109" - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ "01.09"
    return `${cleaned[0].padStart(2, '0')}.${cleaned.slice(1).padStart(2, '0')}`;
  }
  if (cleaned.length === 4) {
    // –ï—Å–ª–∏ –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ "1509" - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ "15.09"
    return `${cleaned.slice(0, 2)}.${cleaned.slice(2).padStart(2, '0')}`;
  }
  if (cleaned.length === 2) {
    // –ï—Å–ª–∏ –≤–≤–µ–ª–∏ —á—Ç–æ-—Ç–æ –≤—Ä–æ–¥–µ "09" - –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ "09.01" (—Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞)
    return `${cleaned.padStart(2, '0')}.01`; // –∏–ª–∏ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å null, –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç
  }
  return null;
},
  
  isValidDate: (dateStr) => {
    const [day, month] = dateStr.split('.').map(Number);
    if (month < 1 || month > 12) return false;
    if (day < 1 || day > 31) return false;
    
    const months30 = [4, 6, 9, 11];
    if (months30.includes(month) && day > 30) return false;
    if (month === 2 && day > 29) return false;
    
    return true;
  }
};

// –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
const dbService = {
  upsertUser: async (userId, chatId, username, birthDate) => {
    const { data, error } = await supabase
      .from('chat_members')
      .upsert({ 
        user_id: userId,
        chat_id: chatId,
        username: username,
        birth_date: birthDate
      }, {
        onConflict: ['user_id', 'chat_id']
      });
    
    if (error) throw error;
    return data;
  },

  getUsersByChat: async (chatId) => {
    const { data, error } = await supabase
      .from('chat_members')
      .select('*')
      .eq('chat_id', chatId);
    
    if (error) throw error;
    return data || [];
  }
};

// –ú–µ–Ω—é –±–æ—Ç–∞
function getMainMenu() {
  return Markup.keyboard([
    ['üìÖ –î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É', 'üëÄ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π'],
    ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
  ])
  .resize()
  .oneTime();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
function isBotMention(text) {
  return text.includes(`@${config.botUsername}`);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
bot.start(async (ctx) => {
  await checkTableStructure();
  return ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:', getMainMenu());
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É"
bot.hears('üìÖ –î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É', (ctx) => {
  return ctx.reply(
    `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n@${config.botUsername} 15.09`,
    Markup.removeKeyboard()
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π"
bot.hears('üëÄ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π', async (ctx) => {
  try {
    const users = await dbService.getUsersByChat(ctx.chat.id);
    if (users.length === 0) {
      return ctx.reply('–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞—Ç', getMainMenu());
    }
    
    const list = users.map(u => `‚Ä¢ ${u.username ? '@' + u.username : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}: ${u.birth_date}`).join('\n');
    return ctx.reply(`üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:\n${list}`, getMainMenu());
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞', getMainMenu());
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
bot.hears('‚ÑπÔ∏è –ü–æ–º–æ—â—å', (ctx) => {
  return ctx.replyWithMarkdown(
    `*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*
1. –ù–∞–∂–º–∏—Ç–µ *"üìÖ –î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É"*
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ \`@${config.botUsername} –î–î.–ú–ú\`
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ *"üëÄ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π"* –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞

*–ü—Ä–∏–º–µ—Ä:*
\`@${config.botUsername} 15.09\` - —Å–æ—Ö—Ä–∞–Ω–∏—Ç –¥–∞—Ç—É 15 —Å–µ–Ω—Ç—è–±—Ä—è`,
    getMainMenu()
  );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞
bot.on('text', async (ctx) => {
  const text = ctx.message.text.trim();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
  if (!isBotMention(text)) return;
  
  // –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
  const cleanText = text.replace(`@${config.botUsername}`, '').trim();
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
  if (cleanText.startsWith('/start')) {
    return ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:', getMainMenu());
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
  try {
    const normalizedDate = dateUtils.normalizeDate(cleanText);
    
    if (!normalizedDate || !dateUtils.isValidDate(normalizedDate)) {
      return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú. –ü—Ä–∏–º–µ—Ä:\n\n`@' + config.botUsername + ' 15.09`');
    }

    const username = ctx.from.username || null;
    await dbService.upsertUser(
      ctx.from.id,
      ctx.chat.id,
      username,
      normalizedDate
    );
    
    const replyText = username 
      ? `‚úÖ –î–∞—Ç–∞ "${normalizedDate}" –¥–ª—è @${username} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!`
      : `‚úÖ –î–∞—Ç–∞ "${normalizedDate}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!`;
    
    return ctx.reply(replyText, getMainMenu());
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞:', error);
    return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö', getMainMenu());
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π
async function checkBirthdays() {
  const now = DateTime.now().setZone(config.timezone);
  const today = now.toFormat('dd.MM');
  const in7Days = now.plus({ days: 7 }).toFormat('dd.MM'); // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π

  try {
    const { data: users } = await supabase.from('chat_members').select('*');
    if (!users) return;

    const todayCelebrations = {};
    const upcomingCelebrations = {}; // –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞ 7 –¥–Ω–µ–π

    users.forEach(user => {
      if (user.birth_date === today) {
        if (!todayCelebrations[user.chat_id]) todayCelebrations[user.chat_id] = [];
        todayCelebrations[user.chat_id].push(user);
      }
      else if (user.birth_date === in7Days) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–π –î–†
        if (!upcomingCelebrations[user.chat_id]) upcomingCelebrations[user.chat_id] = [];
        upcomingCelebrations[user.chat_id].push(user);
      }
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    for (const chatId in todayCelebrations) {
      const mentions = todayCelebrations[chatId].map(u => 
        u.username ? `@${u.username}` : `–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${u.user_id}`
      ).join(', ');
      await bot.telegram.sendMessage(chatId, `üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É ${mentions}! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéÇ`);
    }

    // –ù–æ–≤–æ–µ: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 7 –¥–Ω–µ–π
    for (const chatId in upcomingCelebrations) {
      const mentions = upcomingCelebrations[chatId].map(u => 
        u.username ? `@${u.username}` : `–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${u.user_id}`
      ).join(', ');
      await bot.telegram.sendMessage(
        chatId,
        `‚è≥ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é (${in7Days}) –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É ${mentions}! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å!`
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π:', error);
  }
}

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function start() {
  await checkTableStructure();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
  await checkBirthdays();
  setInterval(checkBirthdays, 24 * 60 * 60 * 1000);

  bot.launch();
  console.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('–û—à–∏–±–∫–∞:', err);
  ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', getMainMenu());
});

process.on('unhandledRejection', (err) => {
  console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', err);
});

start().catch(err => {
  console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err);
  process.exit(1);
});