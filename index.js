require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const { createClient } = require('@supabase/supabase-js');
const { DateTime } = require('luxon');
const express = require('express'); // –î–æ–±–∞–≤–ª—è–µ–º Express –¥–ª—è health checks

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express –¥–ª—è health checks
const app = express();
const PORT = process.env.PORT || 8000;

// Health check endpoint
app.get('/health', (req, res) => {
  res.status(200).json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    service: 'telegram-birthday-bot'
  });
});

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const config = {
  botToken: process.env.TELEGRAM_BOT_TOKEN,
  supabaseUrl: process.env.SUPABASE_URL,
  supabaseKey: process.env.SUPABASE_KEY,
  timezone: process.env.TIMEZONE || 'Europe/Moscow',
  botUsername: 'lkworm_bot'
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if (!config.botToken || !config.supabaseUrl || !config.supabaseKey) {
  console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
const supabase = createClient(config.supabaseUrl, config.supabaseKey);
const bot = new Telegraf(config.botToken);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
  try {
    if (ctx && ctx.reply) {
      ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', getMainMenu());
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ:', e);
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
async function checkTableStructure() {
  try {
    const { error } = await supabase
      .from('chat_members')
      .select('user_id, chat_id, username, birth_date')
      .limit(1);

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã:', error);
      process.exit(1);
    }
    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–∞–±–ª–∏—Ü—ã:', error);
    process.exit(1);
  }
}

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
const dateUtils = {
  normalizeDate: (input) => {
    const cleaned = input.replace(/\D/g, '');
    if (cleaned.length === 3) {
      return `${cleaned[0].padStart(2, '0')}.${cleaned.slice(1).padStart(2, '0')}`;
    }
    if (cleaned.length === 4) {
      return `${cleaned.slice(0, 2)}.${cleaned.slice(2).padStart(2, '0')}`;
    }
    if (cleaned.length === 2) {
      return `${cleaned.padStart(2, '0')}.01`;
    }
    return null;
  },
  
  isValidDate: (dateStr) => {
    try {
      const [day, month] = dateStr.split('.').map(Number);
      if (month < 1 || month > 12) return false;
      if (day < 1 || day > 31) return false;
      
      const months30 = [4, 6, 9, 11];
      if (months30.includes(month) && day > 30) return false;
      if (month === 2 && day > 29) return false;
      
      return true;
    } catch (error) {
      return false;
    }
  }
};

// –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
const dbService = {
  upsertUser: async (userId, chatId, username, birthDate) => {
    try {
      const { data, error } = await supabase
        .from('chat_members')
        .upsert({ 
          user_id: userId,
          chat_id: chatId,
          username: username,
          birth_date: birthDate
        }, {
          onConflict: ['user_id', 'chat_id']
        });
      
      if (error) throw error;
      return data;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
      throw error;
    }
  },

  getUsersByChat: async (chatId) => {
    try {
      const { data, error } = await supabase
        .from('chat_members')
        .select('*')
        .eq('chat_id', chatId);
      
      if (error) throw error;
      return data || [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error);
      throw error;
    }
  }
};

// –ú–µ–Ω—é –±–æ—Ç–∞
function getMainMenu() {
  return Markup.keyboard([
    ['üìÖ –î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É', 'üëÄ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π'],
    ['‚ÑπÔ∏è –ü–æ–º–æ—â—å']
  ])
  .resize()
  .oneTime();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞
function isBotMention(text) {
  return text && text.includes(`@${config.botUsername}`);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
bot.start(async (ctx) => {
  try {
    await checkTableStructure();
    return ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:', getMainMenu());
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ /start:', error);
    return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É"
bot.hears('üìÖ –î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É', (ctx) => {
  try {
    return ctx.reply(
      `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n@${config.botUsername} 15.09`,
      Markup.removeKeyboard()
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç—ã:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π"
bot.hears('üëÄ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π', async (ctx) => {
  try {
    const users = await dbService.getUsersByChat(ctx.chat.id);
    if (users.length === 0) {
      return ctx.reply('–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞—Ç', getMainMenu());
    }
    
    const list = users.map(u => `‚Ä¢ ${u.username ? '@' + u.username : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}: ${u.birth_date}`).join('\n');
    return ctx.reply(`üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:\n${list}`, getMainMenu());
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞:', error);
    return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞', getMainMenu());
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å"
bot.hears('‚ÑπÔ∏è –ü–æ–º–æ—â—å', (ctx) => {
  try {
    return ctx.replyWithMarkdown(
      `*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*
1. –ù–∞–∂–º–∏—Ç–µ *"üìÖ –î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É"*
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ \`@${config.botUsername} –î–î.–ú–ú\`
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ *"üëÄ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π"* –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞

*–ü—Ä–∏–º–µ—Ä:*
\`@${config.botUsername} 15.09\` - —Å–æ—Ö—Ä–∞–Ω–∏—Ç –¥–∞—Ç—É 15 —Å–µ–Ω—Ç—è–±—Ä—è`,
      getMainMenu()
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –ø–æ–º–æ—â–∏:', error);
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞
bot.on('text', async (ctx) => {
  try {
    const text = ctx.message.text.trim();
    
    if (!isBotMention(text)) return;
    
    const cleanText = text.replace(`@${config.botUsername}`, '').trim();
    
    if (cleanText.startsWith('/start')) {
      return ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:', getMainMenu());
    }
    
    const normalizedDate = dateUtils.normalizeDate(cleanText);
    
    if (!normalizedDate || !dateUtils.isValidDate(normalizedDate)) {
      return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú. –ü—Ä–∏–º–µ—Ä:\n\n`@' + config.botUsername + ' 15.09`');
    }

    const username = ctx.from.username || null;
    await dbService.upsertUser(
      ctx.from.id,
      ctx.chat.id,
      username,
      normalizedDate
    );
    
    const replyText = username 
      ? `‚úÖ –î–∞—Ç–∞ "${normalizedDate}" –¥–ª—è @${username} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!`
      : `‚úÖ –î–∞—Ç–∞ "${normalizedDate}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!`;
    
    return ctx.reply(replyText, getMainMenu());
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–∞:', error);
    return ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö', getMainMenu());
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async function checkBirthdays() {
  try {
    const now = DateTime.now().setZone(config.timezone);
    const today = now.toFormat('dd.MM');
    const in7Days = now.plus({ days: 7 }).toFormat('dd.MM');

    const { data: users, error } = await supabase.from('chat_members').select('*');
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –î–†:', error);
      return;
    }

    if (!users) return;

    const todayCelebrations = {};
    const upcomingCelebrations = {};

    users.forEach(user => {
      if (user.birth_date === today) {
        if (!todayCelebrations[user.chat_id]) todayCelebrations[user.chat_id] = [];
        todayCelebrations[user.chat_id].push(user);
      }
      else if (user.birth_date === in7Days) {
        if (!upcomingCelebrations[user.chat_id]) upcomingCelebrations[user.chat_id] = [];
        upcomingCelebrations[user.chat_id].push(user);
      }
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    for (const chatId in todayCelebrations) {
      try {
        const mentions = todayCelebrations[chatId].map(u => 
          u.username ? `@${u.username}` : `–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${u.user_id}`
        ).join(', ');
        await bot.telegram.sendMessage(chatId, `üéâ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É ${mentions}! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéÇ`);
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}:`, error);
      }
    }

    for (const chatId in upcomingCelebrations) {
      try {
        const mentions = upcomingCelebrations[chatId].map(u => 
          u.username ? `@${u.username}` : `–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${u.user_id}`
        ).join(', ');
        await bot.telegram.sendMessage(
          chatId,
          `‚è≥ –ß–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é (${in7Days}) –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É ${mentions}! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å!`
        );
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ —á–∞—Ç ${chatId}:`, error);
      }
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ checkBirthdays:', error);
  }
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
  try {
    await checkTableStructure();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º Express —Å–µ—Ä–≤–µ—Ä
    app.listen(PORT, () => {
      console.log(`‚úÖ Health check —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await checkBirthdays();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    setInterval(checkBirthdays, 24 * 60 * 60 * 1000);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot.launch();
    console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', error);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ graceful shutdown
process.on('SIGINT', () => {
  console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
  bot.stop();
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
  bot.stop();
  process.exit(0);
});

process.on('unhandledRejection', (err) => {
  console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ–±–µ—â–∞–Ω–∏–µ:', err);
});

process.on('uncaughtException', (err) => {
  console.error('‚ùå –ù–µ–ø–æ–π–º–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', err);
  process.exit(1);
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
startBot();

start().catch(err => {
  console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', err);
  process.exit(1);

});
